{:namespaces
 ({:source-url nil,
   :wiki-url "guiftw.events-api.html",
   :name "guiftw.events",
   :doc
   "Functions and macros in guiftw.events handle generation of event\nhandlers code."}
  {:source-url nil,
   :wiki-url "guiftw.examples.swing.basic-api.html",
   :name "guiftw.examples.swing.basic",
   :doc nil}
  {:source-url nil,
   :wiki-url "guiftw.examples.swt.basic-api.html",
   :name "guiftw.examples.swt.basic",
   :doc nil}
  {:source-url nil,
   :wiki-url "guiftw.props-api.html",
   :name "guiftw.props",
   :doc nil}
  {:source-url nil,
   :wiki-url "guiftw.special-api.html",
   :name "guiftw.special",
   :doc nil}
  {:source-url nil,
   :wiki-url "guiftw.styles-api.html",
   :name "guiftw.styles",
   :doc "Styles handling. Look in stylesheet macro doc for syntax."}
  {:source-url nil,
   :wiki-url "guiftw.swing-api.html",
   :name "guiftw.swing",
   :doc "Functions for Happy Swing User."}
  {:source-url nil,
   :wiki-url "guiftw.swt-api.html",
   :name "guiftw.swt",
   :doc "Functions for Happy SWT User"}
  {:source-url nil,
   :wiki-url "guiftw.tree-api.html",
   :name "guiftw.tree",
   :doc
   "Core of GUI tree stucture parsing. The parse-gui macro is heart of it.\n\nSyntax for GUI structure:\n\n[class1 [prop1 value1, prop2 value2, ...]\n [class2 [prop3 value3, ...] ...]\n [class3 [prop4 value4, ...] ...]\n ...]\n\nEach node begins with class name followed by private style sheet and\nany number of children. Syntax for style sheets is described in\nguiftw.styles doc. Uses extra properties:\n\n*id -- unique identifier of the object,\n*groups -- seq of groups identifiers where this object belongs.\n\nThese properties are ignored when used in stylesheets created by\nguiftw.styles/stylesheet macro.\n\nVarious functions return so-called GUI state wich is a map wrapped\nin atom. This map contains predefined keys:\n\n:ids -- a map with objects indentified by their :*id property given\n        in style sheet.\n:groups -- a map with lists of objects grouped by :*group property\n           given in the style sheet,\n:root -- top-level object in GUI tree (usually window).\n\nUser can add any custom key/values at will. They will be preserved."}
  {:source-url nil,
   :wiki-url "guiftw.utils-api.html",
   :name "guiftw.utils",
   :doc nil}),
 :vars
 ({:arglists ([spec listener-creator]),
   :name "adder",
   :namespace "guiftw.events",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.events-api.html#guiftw.events/adder",
   :doc
   "Generates a function that will\n.add<interface name from spec>Listener(listener-creator).",
   :var-type "macro",
   :line 64,
   :file "guiftw/events.clj"}
  {:arglists ([spec handler]),
   :name "event-handler",
   :namespace "guiftw.events",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.events-api.html#guiftw.events/event-handler",
   :doc
   "Macro that returns new EventHandler. Event specified by spec will\nbe handled by handler function. Spec syntax is documented in\nlistener&method-names macro documentation. Handler is a function of\ntwo arguments (gui state atom and event).",
   :var-type "macro",
   :line 73,
   :file "guiftw/events.clj"}
  {:arglists ([spec]),
   :name "event-spec?",
   :namespace "guiftw.events",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.events-api.html#guiftw.events/event-spec?",
   :doc "Returns :event if spec is of an event handler.",
   :var-type "function",
   :line 14,
   :file "guiftw/events.clj"}
  {:arglists ([spec handler]),
   :name "listener",
   :namespace "guiftw.events",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.events-api.html#guiftw.events/listener",
   :doc
   "Generates listener interface implementation given by spec. Only one\nmethod (given by spec) is implemented, rest is generated as empty\nmethods.",
   :var-type "macro",
   :line 43,
   :file "guiftw/events.clj"}
  {:arglists ([spec]),
   :name "listener&method-names",
   :namespace "guiftw.events",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/guiftw.events-api.html#guiftw.events/listener&method-names",
   :doc
   "Extracts listener interface and method (event) to implement from\nspec (a key, symbol or string). Specification is expected in form:\n  1) <listener>+<method>\n    or\n  2) <listener>++<method>\nFirst form is expanded to <listener>Listener class and <method>\nmethod. It is common that names of methods start with same word\nas listener name. So second form is a shortcut for that scenario.\nMethod name is prefixed with listener name. Examples:\n  1) :mouse+mouse-clicked -> MouseListener, mouseClicked\n  2) :mouse++clicked -> same as above.\nAlso, lispy-notation is translated to CamelCase.\n\nNote: you have to import interfaces you want to implement.",
   :var-type "function",
   :line 20,
   :file "guiftw/events.clj"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.props-api.html#guiftw.props/get-value",
   :namespace "guiftw.props",
   :var-type "function",
   :arglists ([setter]),
   :doc "Gets value of property.",
   :name "get-value"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.props-api.html#guiftw.props/property-name",
   :namespace "guiftw.props",
   :var-type "function",
   :arglists ([setter]),
   :doc "Return property name.",
   :name "property-name"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.props-api.html#guiftw.props/set-on",
   :namespace "guiftw.props",
   :var-type "function",
   :arglists ([setter gui subject]),
   :doc "Set property value represented by this object on subject.",
   :name "set-on"}
  {:arglists ([key]),
   :name "setter-name",
   :namespace "guiftw.props",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.props-api.html#guiftw.props/setter-name",
   :doc
   "Generate setter method name for key. Accepts strings, keywords\nand symbols.\n\nNotation :nice-property is translated to NiceProperty (CamelCase).",
   :var-type "function",
   :line 9,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\props.clj"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.styles-api.html#guiftw.styles/CascadeSheet",
   :namespace "guiftw.styles",
   :line 7,
   :file "guiftw/styles.clj",
   :var-type "var",
   :doc
   "CascadeSheet protocol. Defines sheet that can be cascaded (merged)\nwith other sheet. Includes cascade and applies-to? methods.",
   :name "CascadeSheet"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.styles-api.html#guiftw.styles/applies-to?",
   :namespace "guiftw.styles",
   :var-type "function",
   :arglists ([sheet applicants]),
   :doc
   "Returns true if sheet is destined\nto apply on given applicants (sequence of identifiers).",
   :name "applies-to?"}
  {:raw-source-url nil,
   :source-url nil,
   :wiki-url "/guiftw.styles-api.html#guiftw.styles/cascade",
   :namespace "guiftw.styles",
   :var-type "function",
   :arglists ([original over]),
   :doc "Cascade (merge) two sheets.",
   :name "cascade"}
  {:arglists ([& ids-style-pairs]),
   :name "stylesheet",
   :namespace "guiftw.styles",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.styles-api.html#guiftw.styles/stylesheet",
   :doc
   "Takes any amount of pairs of list of identifiers and list of\nproperties. List of identifiers can contain unique object ids (as\nin :*id) and group ids (as in :*groups). Following list of\nproperties will be applied to objects that matches these\nindetifiers. Returns list of Style objects that corresponds to these\npairs of lists.\n\nList of properties contain pairs of property name and\nvalue. Property names maps directly to JavaBeans property\nnames (setters). For example :text \"ASDF\" will map to\nsetText(\"ASDF\"). Properties will applied on objects in order\nthey're given. Property names can be of String, keyword or symbol\ntype but keyword type is recommended.\n\nStyle sheets can contain event handlers where property name is\n<listener-name-without-\"Listener\">+<method-name> of Listener that\ncorresonds to the event you wan to handle. Example:\nmouse+mouse-clicked will correspond to MouseListener, method\nmouseClicked. Also short-hand for double prefix is ++. You can write\nmouse++clicked and it'll translate to same thing. Value for event\nhandlers is an function that takes two arguments: GUI state (an atom\nas described in guiftw.tree doc) and event object.\n\nToolkits (such as Swing) can impose some additional properties (not\ntranslated to setters but used in other places). All extra\nproperties begin with * (asterisk).\n\nlispy-notation is translated to CamelCase, for\nexample :default-close-operation -> setDefaultCloseOperation.\nCamelCase is left as-is.\n\nFor setters that takes more than one argument you can tag value with\n^unroll. Then :size ^unroll (300 200) will translate to setSize(300,\n200) instead of setSize((300 200)).",
   :var-type "macro",
   :line 81,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\styles.clj"}
  {:arglists ([]),
   :name "lafs",
   :namespace "guiftw.swing",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swing-api.html#guiftw.swing/lafs",
   :doc "Get available look-and-feel names.",
   :var-type "function",
   :line 41,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swing.clj"}
  {:arglists ([laf]),
   :name "set-laf",
   :namespace "guiftw.swing",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swing-api.html#guiftw.swing/set-laf",
   :doc
   "Set look-and-feel by name. Throws exception if can't find laf.",
   :var-type "function",
   :line 32,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swing.clj"}
  {:arglists ([struct]),
   :name "swing",
   :namespace "guiftw.swing",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swing-api.html#guiftw.swing/swing",
   :doc
   "Parses GUI tree (struct) and return a function that creates GUI\ndescribed by struct. For syntax of struct look into guiftw.tree\ndoc.\n\nUses *lay extra property to specify layout constraints (used when\nadding object to container).",
   :var-type "macro",
   :line 21,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swing.clj"}
  {:arglists ([ctor parent style]),
   :name "swing-create",
   :namespace "guiftw.swing",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swing-api.html#guiftw.swing/swing-create",
   :doc
   "Function that instantiates object in Swing-specific manner. Calls\nctor using optionally :*cons from style as parameters to create\nobject. Then calls parent.add(object) or parent.add(object,\nlayout_constraints) if :*lay is present in style. Parent can be nil\nand then no adding happens. Returns created object.",
   :var-type "function",
   :line 7,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swing.clj"}
  {:arglists ([f & args]),
   :name "async-exec",
   :namespace "guiftw.swt",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swt-api.html#guiftw.swt/async-exec",
   :doc
   "Put asynchronously function to evaluate in swt in near future.",
   :var-type "function",
   :line 42,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swt.clj"}
  {:arglists ([]),
   :name "default-display",
   :namespace "guiftw.swt",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swt-api.html#guiftw.swt/default-display",
   :doc "Get default display",
   :var-type "function",
   :line 19,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swt.clj"}
  {:arglists ([w]),
   :name "ok?",
   :namespace "guiftw.swt",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swt-api.html#guiftw.swt/ok?",
   :doc "Check if w is not null and not disposed.",
   :var-type "function",
   :line 14,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swt.clj"}
  {:arglists ([shell] []),
   :name "swt-loop",
   :namespace "guiftw.swt",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.swt-api.html#guiftw.swt/swt-loop",
   :doc
   "Loop that dispatches SWT events. Catches all exceptions and simply\nprints stack traces.",
   :var-type "function",
   :line 24,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\swt.clj"}
  {:arglists ([class]),
   :name "constructor",
   :namespace "guiftw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.tree-api.html#guiftw.tree/constructor",
   :doc
   "Returns multi-variant function that reflects all constructors for\ngiven class.",
   :var-type "macro",
   :line 34,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\tree.clj"}
  {:arglists ([instantiator constructor style children]),
   :name "gui-creator",
   :namespace "guiftw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.tree-api.html#guiftw.tree/gui-creator",
   :doc
   "Logic behind creating GUI. It's what parse-gui will return and it's\nnot intended to be used outside of it.\n\nInstantiator have to be 3-arg fn that will construct object using\nconstructor and add it to a parent using evetually properties of an\nobject (especially *cons -- constructor parameters -- and *lay --\nlayout parameters).",
   :var-type "function",
   :line 72,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\tree.clj"}
  {:arglists ([args]),
   :name "gui-creator-args-dispatch",
   :namespace "guiftw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/guiftw.tree-api.html#guiftw.tree/gui-creator-args-dispatch",
   :doc
   "Helper function for gui-creator. Dispatches args to map with keys:\n:stylesheets -- all stylesheets concatenated\n:gui -- state\n:parent -- component where widgets will be added.",
   :var-type "function",
   :line 58,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\tree.clj"}
  {:arglists ([old new]),
   :name "merge-guis",
   :namespace "guiftw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.tree-api.html#guiftw.tree/merge-guis",
   :doc
   "Merges two GUI states (maps). Keys :ids, :groups and :root are\ntreated differently: :ids are merged, all values inside :groups are\nconcatenated and :root is preserved from old map.\n\nAll other keys are merged like in merge function.",
   :var-type "function",
   :line 45,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\tree.clj"}
  {:arglists ([instantiator struct]),
   :name "parse-gui",
   :namespace "guiftw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.tree-api.html#guiftw.tree/parse-gui",
   :doc
   "Parses GUI tree (struct) at compile time. Parsing is as abstract as\npossible, given instantiator function is concrete implementation of\ncreating object and adding it as an child to it's parent.\n\nInstantiator function takes three arguments: a constructor\nfunction (generated multi-variant fn that represents all possible\nconstructors for class at in this node), parent object (nil is\npossible) and style for object that will be created.\n\nReturns a function that takes zero or more arguments: gui state,\nparent object (place where widgets will be added) and any amount of\nstyle sheets that will be applied to created objects. All parameters\nare optional. Created function will return modified gui state or\nnewly created if gui arg is nil. If you pass a map wrapped in an\natom with some custom keys (:ids, :groups and :root are reserved)\nthey will be preserved so you can put there your custom application\nstate.\n\nUse any of concrete implementations like guiftw.swing/swing or\nguiftw.swt/swt instead of this.",
   :var-type "macro",
   :line 103,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\tree.clj"}
  {:arglists ([s]),
   :name "CamelCase",
   :namespace "guiftw.utils",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.utils-api.html#guiftw.utils/CamelCase",
   :doc
   "Like camelCase-small but first letter is always uppercase (traditional\nway of naming classes in Java).",
   :var-type "function",
   :line 10,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\utils.clj"}
  {:arglists ([s]),
   :name "camelCase-small",
   :namespace "guiftw.utils",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/guiftw.utils-api.html#guiftw.utils/camelCase-small",
   :doc
   "Translates a string in a form of \"nice-property\" to\nniceProperty (traditionally used in Java for method names).",
   :var-type "function",
   :line 4,
   :file "d:\\Projekty\\GUIFTW\\autodoc\\..\\src\\guiftw\\utils.clj"})}
